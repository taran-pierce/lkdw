// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(uuid()) @postgresql.Uuid
  name      String     @default("")
  email     String     @unique @default("")
  password  String
  createdAt DateTime?  @default(now())
  products  Product[]  @relation("Product_user")
  cart      CartItem[] @relation("CartItem_user")
  orders    Order[]    @relation("Order_user")
  stripeId  String     @default("")
  role      Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId    String?    @map("role") @postgresql.Uuid

  @@index([roleId])
}

model Role {
  id                String  @id @default(uuid()) @postgresql.Uuid
  name              String  @default("")
  canManageProducts Boolean @default(false)
  canSeeOtherUsers  Boolean @default(true)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}

model Post {
  id          String          @id @default(uuid()) @postgresql.Uuid
  title       String          @default("")
  content     Json            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status      PostStatusType?
  publishDate DateTime?
  author      Author?         @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?         @map("author") @postgresql.Uuid
  tags        Tag[]           @relation("Post_tags")

  @@index([authorId])
}

model Author {
  id    String @id @default(uuid()) @postgresql.Uuid
  name  String @default("")
  email String @unique @default("")
  posts Post[] @relation("Post_author")
}

model Tag {
  id       String    @id @default(uuid()) @postgresql.Uuid
  name     String    @default("")
  posts    Post[]    @relation("Post_tags")
  products Product[] @relation("Product_tags")
}

model Product {
  id                     String      @id @default(uuid()) @postgresql.Uuid
  title                  String      @default("")
  image                  Image?      @relation("Image_product")
  content                Json        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  shortDescription       String      @default("")
  tags                   Tag[]       @relation("Product_tags")
  price                  Int
  user                   User?       @relation("Product_user", fields: [userId], references: [id])
  userId                 String?     @map("user") @postgresql.Uuid
  from_CartItem_product  CartItem[]  @relation("CartItem_product")
  from_OrderItem_product OrderItem[] @relation("OrderItem_product")

  @@index([userId])
}

model Image {
  id              String   @id @default(uuid()) @postgresql.Uuid
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  altText         String   @default("")
  product         Product? @relation("Image_product", fields: [productId], references: [id])
  productId       String?  @unique @map("product") @postgresql.Uuid
}

model CartItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int?     @default(1)
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user") @postgresql.Uuid
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid

  @@index([userId])
  @@index([productId])
}

model Order {
  id     String      @id @default(uuid()) @postgresql.Uuid
  total  Int?
  items  OrderItem[] @relation("OrderItem_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId String?     @map("user") @postgresql.Uuid
  charge Int?
  date   DateTime?

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  quantity  Int?     @default(1)
  product   Product? @relation("OrderItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  order     Order?   @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId   String?  @map("order") @postgresql.Uuid

  @@index([productId])
  @@index([orderId])
}

enum PostStatusType {
  draft
  published
  banned
}
