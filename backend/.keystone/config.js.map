{
  "version": 3,
  "sources": ["../keystone.js", "../schema.js", "../schemas/fields.js", "../access.js", "../auth.js"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport \"dotenv/config\"\n\nimport {\n  config,\n  graphql,\n} from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists, extendGraphqlSchema } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\nconst {\n  S3_BUCKET_NAME: bucketName,\n  S3_REGION: region,\n  S3_ACCESS_KEY_ID: accessKeyId,\n  S3_SECRET_ACCESS_KEY: secretAccessKey,\n} = process.env;\n\nexport default withAuth(\n  config({\n    server: {\n      cors: {\n        // TODO works locally but not when deployed of course\n        // origin: \"http://localhost:3001\",\n        origin: [\n          \"http://localhost:3001\",\n          process.env.VERCEL_URL,\n          process.env.VERCEL_URL_SHORT,\n        ],\n        credentials: true,\n        methods: [\"GET\",\"DELETE\",\"PATCH\",\"POST\",\"PUT\",\"OPTIONS\"],\n        allowedHeaders: [\n          \"Access-Control-Allow-Origin\",\n          \"Access-Control-Allow-Methods\",\n          \"Access-Control-Allow-Headers\",\n          \"Access-Control-Allow-Credentials\",\n          \"Content-Type\",\n          // TODO trying to get file upload from frontend working properly\n          // \"x-apollo-operation-name\",\n          // \"apollo-require-preflight\",\n        ]\n      },\n    },\n    db: {\n      // we\"re using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: \"postgresql\",\n      url: process.env.POSTGRES_URL,\n      enableLogging: true,\n      idField: { kind: \"uuid\" },\n      // useMigrations: true,\n      useMigrations: false,\n    },\n    lists,\n    session,\n    extendGraphqlSchema,\n    storage: {\n      // just leaving this for example, it worked fine locally and in production\n      // but every time the app was redeployed it would get wiped out since it was local\n      // my_local_images: {\n      //   kind: 'local',\n      //   type: 'image',\n      //   generateUrl: path => `${process.env.BASE_URL}/images${path}`,\n      //   serverRoute: {\n      //     path: '/images',\n      //   },\n      //   storagePath: 'public/images'\n      // },\n      my_S3_images: {\n        kind: \"s3\",\n        type: \"image\",\n        bucketName,\n        region,\n        accessKeyId,\n        secretAccessKey,\n        // proxied: {\n        //   baseUrl: '/images/proxy',\n        // },\n        signed: { expiry: 5000 },\n        forcePathStyle: true,\n      },\n    },\n    experimental: {\n      generateNextGraphqlAPI: true,\n    },\n  })\n);", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list, graphql } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n// import { cloudinaryImage } from \"@keystone-6/cloudinary\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  integer,\n  image,\n  checkbox,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it\"s own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from \".keystone/types\"\n// import type { Lists } from \".keystone/types\";\nimport { GraphQLInputObjectType, GraphQLList } from \"graphql\";\n\nimport { permissionFields } from \"./schemas/fields\";\nimport { permissions, rules, isSignedIn } from \"./access\";\n\nexport const lists = {\n  User: list({\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: {\n      operation: {\n        create: () => true,\n        query: () => true,\n        update: rules.canManageUsers,\n        delete: permissions.canManageUsers,\n      },\n    },\n    ui: {\n      // hides backend UI from \"regular\" users\n      hideCreate: (args) => !permissions.canManageUsers(args),\n      hideDelete: (args) => !permissions.canManageUsers(args),\n    },\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: \"unique\", we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\",\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      // posts: relationship({ ref: 'Post.author', many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n      }),\n\n      products: relationship({\n        ref: \"Product.user\",\n        many: true,\n        // this is some customisations for changing how this will look in the AdminUI\n        // ui: {\n        //   displayMode: 'cards',\n        //   cardFields: ['author'],\n        //   inlineEdit: { fields: ['author'] },\n        //   linkToItem: true,\n        //   inlineConnect: true,\n        // },\n      }),\n\n      cart: relationship({\n        ref: \"CartItem.user\",\n        many: true,\n        ui: {\n          createView: { fieldMode: \"hidden\" },\n          itemView: { fieldMode: \"read\" },\n        },\n      }),\n\n      orders: relationship({\n        ref: \"Order.user\",\n        many: true,\n      }),\n\n      stripeId: text(),\n\n      role: relationship({\n        ref: \"Role.assignedTo\",\n        ui: {\n          itemView: { fieldMode: \"read\" },\n          access: {\n            operation: {\n              create: permissions.canManageUsers, \n              update: permissions.canManageUsers,\n            }\n          }\n        }\n      }),\n    },\n    hooks: {\n      resolveInput: async ({\n        resolvedData,\n        operation,\n        context,\n      }) => {\n        if (operation === \"create\") {\n          // when new accounts are created they need to be assigned to the \"customer\" role\n          // grab the role that was created for \"customer\"\n          const customerRole = await context.query.Role.findMany({\n            where: {\n              name: {\n                equals: \"customer\",\n              }\n            }\n          });\n\n          // update the \"resolvedData\" to connect to the role\n          resolvedData.role = {\n            connect: {\n              id: customerRole[0].id\n            }\n          };\n        }\n\n        // We always return resolvedData from the resolveInput hook\n        // https://blog.usmanity.com/connecting-a-relationship-using-a-hook-in-keystone-js-6/\n        // found an article where the person is having to return it this way: resolvedData[\"role\"]\n        // maybe it is old though cause returning \"resolvedData\" the way it comes seems to work fine\n        return resolvedData;\n      },\n    },\n  }),\n\n  Role: list({\n    access: {\n      operation: {\n        create: permissions.canManageRoles,\n        // any one should be able to at least query the roles\n        query: () => true,\n        update: permissions.canManageRoles,\n        delete: permissions.canManageRoles,\n      }\n    },\n    ui: {\n      hideCreate: (args) => !permissions.canManageRoles(args),\n      hideDelete: (args) => !permissions.canManageRoles(args),\n      isHidden: (args) => !permissions.canManageRoles(args),\n    },\n    fields: {\n      name: text({ isRequired: true }),\n      ...permissionFields,\n      assignedTo: relationship({\n        ref: \"User.role\",\n        many: true,\n        // ui: {\n        //   itemView: { fieldMode: 'read' }\n        // }\n      }),\n    }\n  }),\n\n  Post: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        query: rules.canReadProducts,\n        update: rules.canManageProducts,\n        delete: rules.canManageProducts,\n      }\n    },\n\n    // this is the fields for our Post list\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n      status: select({\n        type: \"enum\",\n        options: [\n          { label: \"Draft\", value: \"draft\" },\n          { label: \"Published\", value: \"published\" },\n          { label: \"Banned\", value: \"banned\" },\n        ],\n      }),\n      publishDate: timestamp(),\n      author: relationship({ ref: \"Author.posts\", many: false }),\n\n      // with this field, you can set a User as the author for a Post\n      // author: relationship({\n      //   // we could have used 'User', but then the relationship would only be 1-way\n      //   ref: 'User.posts',\n\n      //   // this is some customisations for changing how this will look in the AdminUI\n      //   ui: {\n      //     displayMode: 'cards',\n      //     cardFields: ['name', 'email'],\n      //     inlineEdit: { fields: ['name', 'email'] },\n      //     linkToItem: true,\n      //     inlineConnect: true,\n      //   },\n\n      //   // a Post can only have one author\n      //   //   this is the default, but we show it here for verbosity\n      //   many: false,\n      // }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"Tag.posts\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] },\n        },\n      }),\n    },\n  }),\n\n  // TODO adding Author to set up example and get it working\n  Author: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        query: rules.canReadProducts,\n        update: rules.canManageProducts,\n        delete: rules.canManageProducts,\n      }\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ isIndexed: \"unique\", validation: { isRequired: true } }),\n      posts: relationship({ ref: \"Post.author\", many: true }),\n    },\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  Tag: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        // products should show up for \"non logged in users\"\n        query: () => true,\n        update: rules.canManageProducts,\n        delete: rules.canManageProducts,\n      }\n    },\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: true,\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Posts associated with a Tag\n      posts: relationship({ ref: \"Post.tags\", many: true }),\n      products: relationship({\n        ref: \"Product.tags\",\n        many: true,\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"title\"],\n          inlineEdit: { fields: [\"title\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"title\"] },\n        },\n      }),\n    },\n  }),\n\n  Product: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        // products should show up for \"non logged in users\"\n        query: () => true,\n        update: rules.canManageProducts,\n        delete: rules.canManageProducts,\n      }\n    },\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n\n      image: relationship({\n        ref: \"Image.product\",\n      }),\n    \n      // TODO use this for product description\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n      shortDescription: text(),\n\n      // // with this field, you can set a User as the author for a Post\n      // author: relationship({\n      //   // we could have used 'User', but then the relationship would only be 1-way\n      //   ref: 'User.products',\n\n      //   // this is some customisations for changing how this will look in the AdminUI\n      //   ui: {\n      //     displayMode: 'cards',\n      //     cardFields: ['products'],\n      //     inlineEdit: { fields: ['products'] },\n      //     linkToItem: true,\n      //     inlineConnect: true,\n      //   },\n\n      //   // a Post can only have one author\n      //   //   this is the default, but we show it here for verbosity\n      //   many: false,\n      // }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"Tag.products\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] },\n        },\n      }),\n\n      price: integer({ validation: { isRequired: true } }),\n\n      user: relationship({\n        ref: \"User.products\",\n      }),\n    },\n  }),\n\n  Image: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        // products should show up for \"non logged in users\"\n        query: () => true,\n        update: rules.canManageProducts,\n        delete: rules.canManageProducts,\n      },\n    },\n    fields: {\n      image: image({ storage: \"my_S3_images\" }),\n      altText: text(),\n      product: relationship({\n        ref: \"Product.image\",\n      }),\n    }\n  }),\n\n  CartItem: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        query: rules.canOrder,\n        update: rules.canOrder,\n        delete: rules.canOrder,\n      }\n    },\n    fields: {\n      quantity: integer({\n        defaultValue: 1,\n      }),\n      user: relationship({\n        ref: \"User.cart\",\n      }),\n      product: relationship({\n        ref: \"Product\",\n      }),\n    },\n    ui: {\n      listView: {\n        initialColumns: [\"user\", \"quantity\"],\n      },\n    }\n  }),\n\n  Order: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        query: rules.canOrder,\n        updated: () => false,\n        delete: () => false,\n      },\n    },\n    fields: {\n      total: integer(),\n      items: relationship({\n        ref: \"OrderItem.order\",\n        many: true,\n      }),\n      user: relationship({\n        ref: \"User.orders\",\n      }),\n      charge: integer(),\n      date: timestamp(),\n    }\n  }),\n\n  OrderItem: list({\n    access: {\n      operation: {\n        create: isSignedIn,\n        query: rules.canManageOrderItems,\n        update: () => false,\n        delete: () => false,\n      }\n    },\n    fields: {\n      quantity: integer({\n        defaultValue: 1,\n      }),\n      product: relationship({\n        ref: \"Product\",\n      }),\n      order: relationship({ ref: \"Order.items\" }),\n    },\n    ui: {\n      listView: {\n        initialColumns: [\"user\", \"quantity\", \"user\"],\n      },\n    },\n  }),\n};\n\nexport const extendGraphqlSchema = graphql.extend(base => {\n\n  return {\n    mutation: {\n      publishPost: graphql.field({\n        // base.object will return an object type from the existing schema\n        // with the name provided or throw if it doesn't exist\n        type: base.object(\"Post\"),\n        args: { id: graphql.arg({ type: graphql.nonNull(graphql.ID) }) },\n        resolve (source, { id }, context) {\n          // Note we use `context.db.Post` here as we have a return type\n          // of Post, and this API provides results in the correct format.\n          // If you accidentally use `context.query.Post` here you can expect problems\n          // when accessing the fields in your GraphQL client.\n          return context.db.Post.updateOne({\n            where: { id },\n            data: { status: \"published\", publishDate: new Date().toISOString() },\n          })\n        },\n      }),\n\n      checkout: graphql.field({\n        type: base.object(\"OrderItem\"),\n        args: {\n          id: graphql.arg({ type: graphql.String }),\n        },\n        async resolve (source, { id }, context) {\n          // get current user session so we can be sure to attach to correct user\n          const sesh = context.session;\n\n          // grab all the cart items for the user\n          const allCartItems = await context.query.CartItem.findMany({\n            where: {\n              user: {\n                id: {\n                  equals: id\n                }\n              }\n            },\n            query: \"id quantity product { id title price }\"\n          });\n\n          // calculate cart total \n          // CartItemCreateInput with any\n          const amount = allCartItems.reduce(function (total, cartItem) {\n            return total + cartItem.quantity * cartItem.product?.price;\n          }, 0);\n\n          // shape them so they will match while attaching them to the order\n          const shapedCartItems = await allCartItems.map((item) => {\n            // delete the cart item after adding it to the map\n            context.db.CartItem.deleteOne({\n              where: {\n                id: item.id,\n              }\n            });\n\n            return {\n              quantity: item.quantity,\n              product: {\n                connect: {\n                  id: item.product.id\n                },\n              },\n            };\n          });\n\n          const now = new Date;\n\n          // if there is no matching cart item then make a new one\n          return await context.db.Order.createOne({\n            data: {\n              date: now.toISOString(),\n              charge: amount,\n              total: amount,\n              items: { create: shapedCartItems },\n              user: { connect: { id: sesh.itemId } },\n            }\n          });\n        },\n      }),\n\n      addToCart: graphql.field({\n        type: base.object(\"CartItem\"),\n        args: {\n          productId: graphql.arg({ type: graphql.String })\n        },\n        async resolve (source, { productId }, context) {\n\n          // get current user session so we can be sure to attach to correct user\n          const sesh = context.session;\n\n          // when we are adding mulitple of the same thing, we can just adjust the quantity\n          // which means it should do a \"updateOne\" instead of \"createOne\"\n          const allCartItems = await context.db.CartItem.findMany({\n            where: {\n              user: {\n                name: sesh.name,\n              },\n            },\n            resolveFields: \"id quantity\"\n          })\n\n          // check to see if we already have an item in the cart that matches\n          const [existingCartItem] = allCartItems.filter((cartItem) => cartItem.productId === productId);\n\n          // if we do then just update the quantity by 1\n          if (existingCartItem) {\n            return context.db.CartItem.updateOne({\n              where: { id: existingCartItem.id },\n              data: { quantity: existingCartItem.quantity + 1 }\n            });\n          }\n\n          // if there is no matching cart item then make a new one\n          return context.db.CartItem.createOne({\n            data: {\n              product: { connect: { id: productId } },\n              user: { connect: { id: sesh.itemId } },\n            }\n          });\n        },\n      }),\n\n      // only add this mutation for a sudo Context (this is not usable from the API)\n      ...(base.schema.extensions.sudo\n        ? {\n            banPost: graphql.field({\n              type: base.object(\"Post\"),\n              args: { id: graphql.arg({ type: graphql.nonNull(graphql.ID) }) },\n              resolve (source, { id }, context) {\n                return context.db.Post.updateOne({\n                  where: { id },\n                  data: { status: \"banned\" },\n                })\n              },\n            }),\n          }\n        : {}),\n    },\n    query: {\n      // TODO these two queries trigger but never get any information back\n      // keeping this one, might be a good example for later\n      // so gotta troubleshoot those\n      // recentPosts: graphql.field({\n      //   type: graphql.list(graphql.nonNull(base.object('Post'))),\n      //   args: {\n      //     id: graphql.arg({ type: graphql.nonNull(graphql.ID) }),\n      //     seconds: graphql.arg({ type: graphql.nonNull(graphql.Int), defaultValue: 600 }),\n      //   },\n      //   resolve (source, { id, seconds }, context: any) {\n      //     const cutoff = new Date(Date.now() - seconds * 1000);\n\n      //     // Note we use `context.db.Post` here as we have a return type\n      //     // of [Post], and this API provides results in the correct format.\n      //     // If you accidentally use `context.query.Post` here you can expect problems\n      //     // when accessing the fields in your GraphQL client.\n      //     return context.db.Post.findMany({\n      //       where: { author: { id: { equals: id } }, publishDate: { gt: cutoff } },\n      //     })\n      //   },\n      // }),\n    },\n  }\n});\n", "import { checkbox } from '@keystone-6/core/fields';\n\nexport const permissionFields = {\n  canManageProducts: checkbox({\n    defaultValue: false,\n    label: 'User can update and delete any product',\n  }),\n  canSeeOtherUsers: checkbox({\n    defaultValue: true,\n    label: 'User can query other users',\n  }),\n  canManageUsers: checkbox({\n    defaultValue: false,\n    label: 'User can edit other users',\n  }),\n  canManageRoles: checkbox({\n    defaultValue: false,\n    label: 'User can CRUD roles',\n  }),\n  canManageCart: checkbox({\n    defaultValue: false,\n    label: 'User can manage cart and cart items',\n  }),\n  canManageOrders: checkbox({\n    defaultValue: false,\n    label: 'User can see and manage orders',\n  }),\n};\n\n// export type Permission = keyof typeof permissionFields;\n\nexport const permissionList = Object.keys(\n  permissionFields\n);\n", "import { permissionList } from \"./schemas/fields\";\n// import { ListAccessArgs } from \"./types\";\n\nexport function isSignedIn({ session }) {\n  return !!session;\n}\n\nconst generatedPermissions = Object.fromEntries(\n  permissionList.map((permission) => [\n    permission,\n    function ({ session }) {\n      return !!session?.data.role?.[permission];\n    },\n  ])\n);\n\n// // permissions - check for access returns boolean\nexport const permissions = {\n  ...generatedPermissions,\n};\n\n// rules can return a boolean or a filter to limit returned items\nexport const rules = {\n  canManageProducts({ session }) {\n    if (!isSignedIn({ session })) {\n      return false;\n    }\n\n    if (permissions.canManageProducts({ session })) {\n      return true;\n    }\n\n    return { user: { id: session.itemId } };\n  },\n  canOrder({ session }) {\n    // this one on each will make sure to return false\n    // when not signed in instead of line 46 throwing an ISE\n    if (!isSignedIn({ session })) {\n      return false;\n    }\n\n    if (permissions.canManageCart({ session })) {\n      return true;\n    }\n\n    return { user: { id: session.itemId } };\n  },\n  canManageOrderItems({ session }) {\n    if (!isSignedIn({ session })) {\n      return false;\n    }\n\n    if (permissions.canManageCart({ session })) {\n      return true;\n    }\n\n    return { order: { user: { id: session.itemId } } };\n  },\n  canReadProducts({ session }) {\n    // if they can manage products\n    // let them sell all products, reguardless of availiabity\n    if (permissions.canManageProducts({ session })) {\n      return true;\n    }\n\n    // otherwise only show products that are available\n    return { status: \"AVAILABLE\" };\n  },\n  canManageUsers({ session, req }) {\n    if (!isSignedIn({ session })) {\n      return false;\n    }\n\n    if (permissions.canManageUsers({ session })) {\n      return true;\n    }\n\n    // TODO why is this throwing an error now when not logged in as admin?\n    // says it HAS to be a boolean now and the object is not allowed\n    return { id: session.itemId };\n  },\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from \"crypto\";\nimport { createAuth } from \"@keystone-6/auth\";\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\n\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n  sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\nimport { permissionList } from \"./schemas/fields\";\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: \"User\",\n  identityField: \"email\",\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: `name createdAt id email role { ${permissionList.join(\" \")} }`,\n  secretField: \"password\",\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: [\"name\", \"email\", \"password\"],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n  // secure: false,\n  secure: true,\n  // sameSite: 'lax',\n  sameSite: \"none\",\n});\n\nexport { withAuth, session };"],
  "mappings": "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",
  "names": ["import_core", "import_fields", "session"]
}
